@page
@using PhraseFinder.WebApp.Extensions
@model PhraseFinder.WebApp.Pages.PhrasesModel
@{
	ViewData["Title"] = "Exprs. y locs. encontradas";
}

<style>
    .user-text-paragraph {
        white-space: pre-line;
        border-style: dashed !important;
        padding: 0.6rem 1rem;
    }

    .selected-phrase-card {
        box-shadow: 0 0 0 0.25rem rgba(49, 132, 253, 0.5);
    }

    .selected-phrase-link {
        color: var(--bs-primary) !important;
    }
</style>

<article class="container">
    <header class="row gap-3 align-items-center">
        <a asp-page="/Index" class="d-print-none col-auto btn btn-link back-button">
            <img src="~/assets/arrow-left-circle.svg" width="24" height="24" alt="Icono de vuelta atrás" />
        </a>
        <h2 class="col p-0 m-0">Expresiones y locuciones@(Model.PhrasesAreLoaded ? " encontradas" : "")</h2>
        <div class="mt-4 mt-md-0 col-12 col-md-auto">
            @if (Model.FoundPhrases != null)
            {
                <button class="d-print-none mx-auto btn btn-secondary d-flex flex-row align-items-center gap-2" onclick="print()">
                    <img style="filter: invert(100%);"
                         src="~/assets/file-earmark-arrow-down.svg"
                         width="24"
                         height="24"
                         alt="Icono de descarga de fichero">
                    Guardar como PDF
                </button>
            }
        </div>
    </header>

    @if (Model.FoundPhrases == null || Model.FoundPhrases.Length == 0)
    {
        <p class="my-5 user-text-paragraph border border-4 rounded-3 fw-medium">@Model.Text</p>
    }
    
    @if (Model.FoundPhrases?.Length == 0)
    {
        <p class="fw-bold mt-3 text-muted text-end">
            No se encontraron expresiones ni locuciones en el texto introducido...
        </p>            
    }
    
    @if (!Model.PhrasesAreLoaded)
    {
        <noscript>
            <style>
                #loading {
                    display: none !important;
                }
            </style>
        </noscript>

        <form
            id="find-phrases"
            method="post"
            class="invisible"
            style="width: 0; height: 0;"
            aria-hidden="true">
        </form>

        <div id="loading" class="my-5 d-flex align-items-center justify-content-center gap-3" role="status">
            <span class="spinner-border text-primary"></span>
            <p class="mt-3 text-muted fw-semibold">
                Buscando expresiones y locuciones...
                <br>
                Este proceso puede tomar unos segundos.
            </p>
        </div>

        <noscript>
            <form method="post" class="d-flex justify-content-center gap-2 gap-sm-5">
                <a asp-page="/Index" class="btn btn-danger">Cancelar</a>
                <button class="btn btn-primary" type="submit">Analizar texto</button>
            </form>
        </noscript> 
    }
    
    @if (Model.FoundPhrases?.Length > 0)
    {
        <p class="my-5 user-text-paragraph border border-4 rounded-3 fw-medium">@Html.HighlightPhrases(Model.Text, Model.FoundPhrases)</p>


        <section class="row row-cols-1 row-cols-xl-2">
            @{
                var n = 0;
            }

            @foreach (var phrase in Model.FoundPhrases)
            {
                n++;

                <div class="col mb-4">
                    <article id="phrase-@n" class="card h-100">
                        <div class="card-header">
                            <span class="card-subtitle fw-bolder">@n</span>
                        </div>
                        <div class="card-body">
                            <h3 class="card-title">
                                @phrase.Phrase
                            </h3>
                            @foreach (var (definition, examples) in phrase.DefinitionToExamples)
                            {
                                <p class="mt-4"><strong class="fw-semibold">@definition</strong></p>
                                if (examples.Length > 0)
                                {
                                    <ul class="list-group">
                                        @foreach (var example in examples)
                                        {
                                            <li class="list-group-item"><em>@example</em></li>
                                        }
                                    </ul>
                                }
                            }
                        </div>
                    </article>
                </div>
            }
        </section>
    }

    <div asp-validation-summary="All" class="text-danger mt-5"></div>
</article>


@section Scripts {
    <script type="text/javascript" defer>
        let selectedPhrase
        let selectedPhraseLink

        function findPhrases() {
            const findPhrasesForm = document.getElementById('find-phrases')

            if (findPhrasesForm) {
                findPhrasesForm.submit()
            }
        }

        function setUpPhraseLinks() {
            document.querySelectorAll('[id^="phrase-link-"]').forEach(phraseLink => {
                phraseLink.addEventListener('click', e => handlePhraseLinkClick(e, phraseLink))
            })
        }

        function handlePhraseLinkClick(e, phraseLink) {
            const phraseId = phraseLink.id.replace('link-', '')

            selectedPhrase?.classList.remove('selected-phrase-card')
            selectedPhraseLink?.classList.remove('selected-phrase-link')

            if (selectedPhrase?.id === phraseId) {
                e.preventDefault()
                selectedPhrase = null
                selectedPhraseLink = null
                return
            }

            selectedPhrase = document.getElementById(phraseId)
            selectedPhrase?.classList.add('selected-phrase-card')

            selectedPhraseLink = phraseLink
            selectedPhraseLink.classList.add('selected-phrase-link')
        }

        findPhrases()
        setUpPhraseLinks()
    </script>
}
